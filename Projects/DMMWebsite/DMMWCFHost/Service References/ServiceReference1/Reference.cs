//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DMMWCFHost.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Meet", Namespace="http://schemas.datacontract.org/2004/07/DMMLib")]
    [System.SerializableAttribute()]
    public partial class Meet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime dateOfMeetk__BackingFieldField;
        
        private string locationk__BackingFieldField;
        
        private System.Collections.Generic.Dictionary<string, DMMWCFHost.ServiceReference1.Performance[]> performancesk__BackingFieldField;
        
        private DMMWCFHost.ServiceReference1.Teams schoolNamesk__BackingFieldField;
        
        private string weatherConditionsk__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<dateOfMeet>k__BackingField", IsRequired=true)]
        public System.DateTime dateOfMeetk__BackingField {
            get {
                return this.dateOfMeetk__BackingFieldField;
            }
            set {
                if ((this.dateOfMeetk__BackingFieldField.Equals(value) != true)) {
                    this.dateOfMeetk__BackingFieldField = value;
                    this.RaisePropertyChanged("dateOfMeetk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<location>k__BackingField", IsRequired=true)]
        public string locationk__BackingField {
            get {
                return this.locationk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.locationk__BackingFieldField, value) != true)) {
                    this.locationk__BackingFieldField = value;
                    this.RaisePropertyChanged("locationk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<performances>k__BackingField", IsRequired=true)]
        public System.Collections.Generic.Dictionary<string, DMMWCFHost.ServiceReference1.Performance[]> performancesk__BackingField {
            get {
                return this.performancesk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.performancesk__BackingFieldField, value) != true)) {
                    this.performancesk__BackingFieldField = value;
                    this.RaisePropertyChanged("performancesk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<schoolNames>k__BackingField", IsRequired=true)]
        public DMMWCFHost.ServiceReference1.Teams schoolNamesk__BackingField {
            get {
                return this.schoolNamesk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.schoolNamesk__BackingFieldField, value) != true)) {
                    this.schoolNamesk__BackingFieldField = value;
                    this.RaisePropertyChanged("schoolNamesk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<weatherConditions>k__BackingField", IsRequired=true)]
        public string weatherConditionsk__BackingField {
            get {
                return this.weatherConditionsk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.weatherConditionsk__BackingFieldField, value) != true)) {
                    this.weatherConditionsk__BackingFieldField = value;
                    this.RaisePropertyChanged("weatherConditionsk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Teams", Namespace="http://schemas.datacontract.org/2004/07/DMMLib")]
    [System.SerializableAttribute()]
    public partial class Teams : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Collections.Generic.Dictionary<string, string> boySchoolNamesk__BackingFieldField;
        
        private System.Collections.Generic.Dictionary<string, string> girlSchoolNamesk__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<boySchoolNames>k__BackingField", IsRequired=true)]
        public System.Collections.Generic.Dictionary<string, string> boySchoolNamesk__BackingField {
            get {
                return this.boySchoolNamesk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.boySchoolNamesk__BackingFieldField, value) != true)) {
                    this.boySchoolNamesk__BackingFieldField = value;
                    this.RaisePropertyChanged("boySchoolNamesk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<girlSchoolNames>k__BackingField", IsRequired=true)]
        public System.Collections.Generic.Dictionary<string, string> girlSchoolNamesk__BackingField {
            get {
                return this.girlSchoolNamesk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.girlSchoolNamesk__BackingFieldField, value) != true)) {
                    this.girlSchoolNamesk__BackingFieldField = value;
                    this.RaisePropertyChanged("girlSchoolNamesk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Performance", Namespace="http://schemas.datacontract.org/2004/07/DMMLib")]
    [System.SerializableAttribute()]
    public partial class Performance : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string athleteNamek__BackingFieldField;
        
        private int heatNumk__BackingFieldField;
        
        private decimal performancek__BackingFieldField;
        
        private string schoolNamek__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<athleteName>k__BackingField", IsRequired=true)]
        public string athleteNamek__BackingField {
            get {
                return this.athleteNamek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.athleteNamek__BackingFieldField, value) != true)) {
                    this.athleteNamek__BackingFieldField = value;
                    this.RaisePropertyChanged("athleteNamek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<heatNum>k__BackingField", IsRequired=true)]
        public int heatNumk__BackingField {
            get {
                return this.heatNumk__BackingFieldField;
            }
            set {
                if ((this.heatNumk__BackingFieldField.Equals(value) != true)) {
                    this.heatNumk__BackingFieldField = value;
                    this.RaisePropertyChanged("heatNumk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<performance>k__BackingField", IsRequired=true)]
        public decimal performancek__BackingField {
            get {
                return this.performancek__BackingFieldField;
            }
            set {
                if ((this.performancek__BackingFieldField.Equals(value) != true)) {
                    this.performancek__BackingFieldField = value;
                    this.RaisePropertyChanged("performancek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<schoolName>k__BackingField", IsRequired=true)]
        public string schoolNamek__BackingField {
            get {
                return this.schoolNamek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.schoolNamek__BackingFieldField, value) != true)) {
                    this.schoolNamek__BackingFieldField = value;
                    this.RaisePropertyChanged("schoolNamek__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AuthenticateUser", ReplyAction="http://tempuri.org/IService1/AuthenticateUserResponse")]
        bool AuthenticateUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AuthenticateUser", ReplyAction="http://tempuri.org/IService1/AuthenticateUserResponse")]
        System.Threading.Tasks.Task<bool> AuthenticateUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateUser", ReplyAction="http://tempuri.org/IService1/CreateUserResponse")]
        bool CreateUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateUser", ReplyAction="http://tempuri.org/IService1/CreateUserResponse")]
        System.Threading.Tasks.Task<bool> CreateUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddMeet", ReplyAction="http://tempuri.org/IService1/AddMeetResponse")]
        bool AddMeet(DMMWCFHost.ServiceReference1.Meet meet, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddMeet", ReplyAction="http://tempuri.org/IService1/AddMeetResponse")]
        System.Threading.Tasks.Task<bool> AddMeetAsync(DMMWCFHost.ServiceReference1.Meet meet, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindMeetId", ReplyAction="http://tempuri.org/IService1/FindMeetIdResponse")]
        int FindMeetId(DMMWCFHost.ServiceReference1.Meet meet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindMeetId", ReplyAction="http://tempuri.org/IService1/FindMeetIdResponse")]
        System.Threading.Tasks.Task<int> FindMeetIdAsync(DMMWCFHost.ServiceReference1.Meet meet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindMeet", ReplyAction="http://tempuri.org/IService1/FindMeetResponse")]
        DMMWCFHost.ServiceReference1.Meet FindMeet(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindMeet", ReplyAction="http://tempuri.org/IService1/FindMeetResponse")]
        System.Threading.Tasks.Task<DMMWCFHost.ServiceReference1.Meet> FindMeetAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteMeet", ReplyAction="http://tempuri.org/IService1/DeleteMeetResponse")]
        bool DeleteMeet(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteMeet", ReplyAction="http://tempuri.org/IService1/DeleteMeetResponse")]
        System.Threading.Tasks.Task<bool> DeleteMeetAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddBoysTeam", ReplyAction="http://tempuri.org/IService1/AddBoysTeamResponse")]
        bool AddBoysTeam(DMMWCFHost.ServiceReference1.Meet meet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddBoysTeam", ReplyAction="http://tempuri.org/IService1/AddBoysTeamResponse")]
        System.Threading.Tasks.Task<bool> AddBoysTeamAsync(DMMWCFHost.ServiceReference1.Meet meet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindBoysTeam", ReplyAction="http://tempuri.org/IService1/FindBoysTeamResponse")]
        System.Collections.Generic.Dictionary<string, string> FindBoysTeam(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindBoysTeam", ReplyAction="http://tempuri.org/IService1/FindBoysTeamResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> FindBoysTeamAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteBoysTeam", ReplyAction="http://tempuri.org/IService1/DeleteBoysTeamResponse")]
        bool DeleteBoysTeam(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteBoysTeam", ReplyAction="http://tempuri.org/IService1/DeleteBoysTeamResponse")]
        System.Threading.Tasks.Task<bool> DeleteBoysTeamAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddGirlsTeam", ReplyAction="http://tempuri.org/IService1/AddGirlsTeamResponse")]
        bool AddGirlsTeam(DMMWCFHost.ServiceReference1.Meet meet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddGirlsTeam", ReplyAction="http://tempuri.org/IService1/AddGirlsTeamResponse")]
        System.Threading.Tasks.Task<bool> AddGirlsTeamAsync(DMMWCFHost.ServiceReference1.Meet meet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindGirlsTeam", ReplyAction="http://tempuri.org/IService1/FindGirlsTeamResponse")]
        System.Collections.Generic.Dictionary<string, string> FindGirlsTeam(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindGirlsTeam", ReplyAction="http://tempuri.org/IService1/FindGirlsTeamResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> FindGirlsTeamAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteGirlsTeam", ReplyAction="http://tempuri.org/IService1/DeleteGirlsTeamResponse")]
        bool DeleteGirlsTeam(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteGirlsTeam", ReplyAction="http://tempuri.org/IService1/DeleteGirlsTeamResponse")]
        System.Threading.Tasks.Task<bool> DeleteGirlsTeamAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPerformances", ReplyAction="http://tempuri.org/IService1/AddPerformancesResponse")]
        bool AddPerformances(DMMWCFHost.ServiceReference1.Meet meet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPerformances", ReplyAction="http://tempuri.org/IService1/AddPerformancesResponse")]
        System.Threading.Tasks.Task<bool> AddPerformancesAsync(DMMWCFHost.ServiceReference1.Meet meet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPerformance", ReplyAction="http://tempuri.org/IService1/AddPerformanceResponse")]
        bool AddPerformance(DMMWCFHost.ServiceReference1.Meet meet, string eventName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPerformance", ReplyAction="http://tempuri.org/IService1/AddPerformanceResponse")]
        System.Threading.Tasks.Task<bool> AddPerformanceAsync(DMMWCFHost.ServiceReference1.Meet meet, string eventName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindPerformancesDictionary", ReplyAction="http://tempuri.org/IService1/FindPerformancesDictionaryResponse")]
        System.Collections.Generic.Dictionary<string, DMMWCFHost.ServiceReference1.Performance[]> FindPerformancesDictionary(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindPerformancesDictionary", ReplyAction="http://tempuri.org/IService1/FindPerformancesDictionaryResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, DMMWCFHost.ServiceReference1.Performance[]>> FindPerformancesDictionaryAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindPerformancesList", ReplyAction="http://tempuri.org/IService1/FindPerformancesListResponse")]
        DMMWCFHost.ServiceReference1.Performance[] FindPerformancesList(int id, string eventName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindPerformancesList", ReplyAction="http://tempuri.org/IService1/FindPerformancesListResponse")]
        System.Threading.Tasks.Task<DMMWCFHost.ServiceReference1.Performance[]> FindPerformancesListAsync(int id, string eventName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePerformances", ReplyAction="http://tempuri.org/IService1/DeletePerformancesResponse")]
        bool DeletePerformances(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePerformances", ReplyAction="http://tempuri.org/IService1/DeletePerformancesResponse")]
        System.Threading.Tasks.Task<bool> DeletePerformancesAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePerformance", ReplyAction="http://tempuri.org/IService1/DeletePerformanceResponse")]
        bool DeletePerformance(int id, string eventName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePerformance", ReplyAction="http://tempuri.org/IService1/DeletePerformanceResponse")]
        System.Threading.Tasks.Task<bool> DeletePerformanceAsync(int id, string eventName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListOfMeets", ReplyAction="http://tempuri.org/IService1/ListOfMeetsResponse")]
        System.Collections.Generic.Dictionary<int, DMMWCFHost.ServiceReference1.Meet> ListOfMeets(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListOfMeets", ReplyAction="http://tempuri.org/IService1/ListOfMeetsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, DMMWCFHost.ServiceReference1.Meet>> ListOfMeetsAsync(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ResetPrimaryKeys", ReplyAction="http://tempuri.org/IService1/ResetPrimaryKeysResponse")]
        bool ResetPrimaryKeys();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ResetPrimaryKeys", ReplyAction="http://tempuri.org/IService1/ResetPrimaryKeysResponse")]
        System.Threading.Tasks.Task<bool> ResetPrimaryKeysAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        DMMWCFLib.CompositeType GetDataUsingDataContract(DMMWCFLib.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<DMMWCFLib.CompositeType> GetDataUsingDataContractAsync(DMMWCFLib.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : DMMWCFHost.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<DMMWCFHost.ServiceReference1.IService1>, DMMWCFHost.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public bool AuthenticateUser(string username, string password) {
            return base.Channel.AuthenticateUser(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> AuthenticateUserAsync(string username, string password) {
            return base.Channel.AuthenticateUserAsync(username, password);
        }
        
        public bool CreateUser(string username, string password) {
            return base.Channel.CreateUser(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> CreateUserAsync(string username, string password) {
            return base.Channel.CreateUserAsync(username, password);
        }
        
        public bool AddMeet(DMMWCFHost.ServiceReference1.Meet meet, string user) {
            return base.Channel.AddMeet(meet, user);
        }
        
        public System.Threading.Tasks.Task<bool> AddMeetAsync(DMMWCFHost.ServiceReference1.Meet meet, string user) {
            return base.Channel.AddMeetAsync(meet, user);
        }
        
        public int FindMeetId(DMMWCFHost.ServiceReference1.Meet meet) {
            return base.Channel.FindMeetId(meet);
        }
        
        public System.Threading.Tasks.Task<int> FindMeetIdAsync(DMMWCFHost.ServiceReference1.Meet meet) {
            return base.Channel.FindMeetIdAsync(meet);
        }
        
        public DMMWCFHost.ServiceReference1.Meet FindMeet(int id) {
            return base.Channel.FindMeet(id);
        }
        
        public System.Threading.Tasks.Task<DMMWCFHost.ServiceReference1.Meet> FindMeetAsync(int id) {
            return base.Channel.FindMeetAsync(id);
        }
        
        public bool DeleteMeet(int id) {
            return base.Channel.DeleteMeet(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMeetAsync(int id) {
            return base.Channel.DeleteMeetAsync(id);
        }
        
        public bool AddBoysTeam(DMMWCFHost.ServiceReference1.Meet meet) {
            return base.Channel.AddBoysTeam(meet);
        }
        
        public System.Threading.Tasks.Task<bool> AddBoysTeamAsync(DMMWCFHost.ServiceReference1.Meet meet) {
            return base.Channel.AddBoysTeamAsync(meet);
        }
        
        public System.Collections.Generic.Dictionary<string, string> FindBoysTeam(int id) {
            return base.Channel.FindBoysTeam(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> FindBoysTeamAsync(int id) {
            return base.Channel.FindBoysTeamAsync(id);
        }
        
        public bool DeleteBoysTeam(int id) {
            return base.Channel.DeleteBoysTeam(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteBoysTeamAsync(int id) {
            return base.Channel.DeleteBoysTeamAsync(id);
        }
        
        public bool AddGirlsTeam(DMMWCFHost.ServiceReference1.Meet meet) {
            return base.Channel.AddGirlsTeam(meet);
        }
        
        public System.Threading.Tasks.Task<bool> AddGirlsTeamAsync(DMMWCFHost.ServiceReference1.Meet meet) {
            return base.Channel.AddGirlsTeamAsync(meet);
        }
        
        public System.Collections.Generic.Dictionary<string, string> FindGirlsTeam(int id) {
            return base.Channel.FindGirlsTeam(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> FindGirlsTeamAsync(int id) {
            return base.Channel.FindGirlsTeamAsync(id);
        }
        
        public bool DeleteGirlsTeam(int id) {
            return base.Channel.DeleteGirlsTeam(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteGirlsTeamAsync(int id) {
            return base.Channel.DeleteGirlsTeamAsync(id);
        }
        
        public bool AddPerformances(DMMWCFHost.ServiceReference1.Meet meet) {
            return base.Channel.AddPerformances(meet);
        }
        
        public System.Threading.Tasks.Task<bool> AddPerformancesAsync(DMMWCFHost.ServiceReference1.Meet meet) {
            return base.Channel.AddPerformancesAsync(meet);
        }
        
        public bool AddPerformance(DMMWCFHost.ServiceReference1.Meet meet, string eventName) {
            return base.Channel.AddPerformance(meet, eventName);
        }
        
        public System.Threading.Tasks.Task<bool> AddPerformanceAsync(DMMWCFHost.ServiceReference1.Meet meet, string eventName) {
            return base.Channel.AddPerformanceAsync(meet, eventName);
        }
        
        public System.Collections.Generic.Dictionary<string, DMMWCFHost.ServiceReference1.Performance[]> FindPerformancesDictionary(int id) {
            return base.Channel.FindPerformancesDictionary(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, DMMWCFHost.ServiceReference1.Performance[]>> FindPerformancesDictionaryAsync(int id) {
            return base.Channel.FindPerformancesDictionaryAsync(id);
        }
        
        public DMMWCFHost.ServiceReference1.Performance[] FindPerformancesList(int id, string eventName) {
            return base.Channel.FindPerformancesList(id, eventName);
        }
        
        public System.Threading.Tasks.Task<DMMWCFHost.ServiceReference1.Performance[]> FindPerformancesListAsync(int id, string eventName) {
            return base.Channel.FindPerformancesListAsync(id, eventName);
        }
        
        public bool DeletePerformances(int id) {
            return base.Channel.DeletePerformances(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePerformancesAsync(int id) {
            return base.Channel.DeletePerformancesAsync(id);
        }
        
        public bool DeletePerformance(int id, string eventName) {
            return base.Channel.DeletePerformance(id, eventName);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePerformanceAsync(int id, string eventName) {
            return base.Channel.DeletePerformanceAsync(id, eventName);
        }
        
        public System.Collections.Generic.Dictionary<int, DMMWCFHost.ServiceReference1.Meet> ListOfMeets(string user) {
            return base.Channel.ListOfMeets(user);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, DMMWCFHost.ServiceReference1.Meet>> ListOfMeetsAsync(string user) {
            return base.Channel.ListOfMeetsAsync(user);
        }
        
        public bool ResetPrimaryKeys() {
            return base.Channel.ResetPrimaryKeys();
        }
        
        public System.Threading.Tasks.Task<bool> ResetPrimaryKeysAsync() {
            return base.Channel.ResetPrimaryKeysAsync();
        }
        
        public DMMWCFLib.CompositeType GetDataUsingDataContract(DMMWCFLib.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<DMMWCFLib.CompositeType> GetDataUsingDataContractAsync(DMMWCFLib.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
    }
}
